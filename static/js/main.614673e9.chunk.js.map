{"version":3,"sources":["Badge.js","LineChart.js","DataSource.js","Graph.js","Description.js","CountryCard.js","CountryCardsContainer.js","App.js","serviceWorker.js","index.js"],"names":["Badge","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","badgeStyle","setState","cursor","color","fontColor","backgroundColor","react_default","a","createElement","className","style","value","graphType","onClick","PureComponent","defaultProps","LineChart","chartData","yAxesLabel","xAxesLabel","nextProps","type","es","data","options","title","display","displayTitle","text","fontSize","legend","displayLegend","position","legendPosition","scales","xAxes","ticks","beginAtZero","scaleLabel","labelString","yAxes","Component","Country","BANGLADESH","INDIA","ISRAEL","KUWAIT","TURKEY","bangladeshChartData","GDP","labels","datasets","label","fill","borderColor","Revenue","indiaChartData","israelChartData","kuwaitChartData","turkeyChartData","DataSource","country","Graph","getChartData","_this2","_this3","src_LineChart","getCountryList","bangladeshDescription","Fragment","israelDescription","indiaDescription","kuwaitDescription","turkeyDescription","Description","getDescription","element","GraphTypes","CountryCard","onSetGraphType","e","target","getAttribute","badgesSection","graphTypes","map","index","src_Badge","key","headerSection","values","src_Graph","src_Description","taxData","hoverBackgroundColor","gdpData","maintainAspectRatio","responsive","boxWidth","CountryCardsContainer","Datamap","document","getElementById","geographyConfig","popupOnHover","highlightOnHover","borderWidth","setProjection","projection","d3","geo","equirectangular","center","scale","translate","offsetWidth","offsetHeight","path","fills","defaultFill","BGD","IND","ISR","KWT","TUR","fillKey","done","datamap","svg","selectAll","on","geography","countryList","countryFromGeo","properties","name","includes","width","id","height","src_CountryCard","App","src_CountryCardsContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iLAEMA,cAQJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,WAAa,IAHER,oFAQjBG,KAAKM,SAAS,CACZD,WAAY,CACRE,OAAOP,KAAKJ,MAAMW,OAClBC,MAAOR,KAAKJ,MAAMa,UAClBC,gBAAiBV,KAAKJ,MAAMc,oDAMlC,OACMC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,sBAAsBC,MAAOf,KAAKI,MAAMC,WAAYW,MAAOhB,KAAKJ,MAAMqB,UAAYC,QAASlB,KAAKJ,MAAMsB,SACjHlB,KAAKJ,MAAMqB,mBA7BRE,iBAAdxB,EAEGyB,aAAe,CACpBX,UAAW,QACXC,gBAAiB,qBACjBH,OAAQ,WA+BGZ,gBCnCT0B,cACJ,SAAAA,EAAYzB,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,IAChBxB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuB,GAAAlB,KAAAH,KAAMJ,KACDQ,MAAQ,CACXkB,UAAW,GACXC,WAAY,GACZC,WAAY,IALE3B,oFAmBhBG,KAAKM,SAAS,CACZgB,UAAWtB,KAAKJ,MAAM0B,UACtBC,WAAYvB,KAAKJ,MAAM2B,WACvBC,WAAYxB,KAAKJ,MAAM4B,+DAIDC,GACxBzB,KAAKM,SAAS,CACEoB,KAAOD,EAAUC,KACjBJ,UAAWG,EAAUH,UACrBC,WAAYE,EAAUF,WACtBC,WAAYC,EAAUD,8CAKtC,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEC,KAAM5B,KAAKI,MAAMkB,UACjBO,QAAS,CACPC,MAAM,CACJC,QAAQ/B,KAAKJ,MAAMoC,aACnBC,KAAMjC,KAAKJ,MAAM8B,KACjBQ,SAAS,IAEXC,OAAO,CACLJ,QAAQ/B,KAAKJ,MAAMwC,cACnBC,SAASrC,KAAKJ,MAAM0C,gBAEtBC,OAAQ,CACJC,MAAO,CAAC,CACJC,MAAO,CACHC,aAAY,GAEhBC,WAAY,CACRZ,SAAS,EACTa,YAAa5C,KAAKI,MAAMoB,WACxBU,SAAU,MAGlBW,MAAO,CAAC,CACNJ,MAAO,CACHC,aAAY,GAEhBC,WAAY,CACRZ,SAAS,EACTa,YAAa5C,KAAKI,MAAMmB,WACxBW,SAAU,kBArERY,aAAlBzB,EAUGD,aAAe,CACpBM,KAAM,MACNM,cAAa,EACbI,eAAe,EACfE,eAAe,QACff,WAAY,cACZC,WAAY,wBAgEDH,QCnFT0B,EAAU,CACdC,WAAY,aACZC,MAAO,QACPC,OAAQ,SACRC,OAAQ,SACRC,OAAQ,UAGJC,EAAsB,CAC1BC,IAAK,CACHC,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzEC,SAAU,CAAC,CACTC,MAAO,oBACPC,MAAM,EACN9B,KAAM,CACJ,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAEFlB,gBAAiB,CACf,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAEFiD,YAAa,sBACZ,CACDF,MAAO,4BACPC,MAAM,EACN9B,KAAM,CACJ,YACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,aAEFlB,gBAAiB,CACf,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAEFiD,YAAa,wBAGjBC,QAAS,CACPL,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACjDC,SAAU,CAAC,CACTC,MAAO,wBACPC,MAAM,EACN9B,KAAM,CACJ,SACA,UACA,UACA,UACA,UACA,SAEFlB,gBAAiB,CACf,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAEFiD,YAAa,sBACZ,CACDF,MAAO,gCACPC,MAAM,EACN9B,KAAM,CACJ,WACA,YACA,YACA,WACA,YACA,aAEFlB,gBAAiB,CACf,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAEFiD,YAAa,yBAIbE,EAAiB,CACrBP,IAAK,CACHC,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzGC,SAAU,CAAC,CACTC,MAAO,oBACPC,MAAM,EACN9B,KAAM,CACJ,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,WACA,aAEFlB,gBAAiB,CACf,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAEFiD,YAAa,sBACZ,CACDF,MAAO,4BACPC,MAAM,EACN9B,KAAM,CACJ,YACA,YACA,YACA,YACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,aAEFlB,gBAAiB,CACf,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAEFiD,YAAa,wBAGjBC,QAAS,CACPL,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACjFC,SAAU,CAAC,CACTC,MAAO,wBACPC,MAAM,EACN9B,KAAM,CACJ,YACA,YACA,YACA,YACA,YACA,YACA,OACA,YACA,YACA,aAEFlB,gBAAiB,CACf,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAEFiD,YAAa,sBACZ,CACDF,MAAO,gCACPC,MAAM,EACN9B,KAAM,CACJ,WACA,YACA,YACA,YACA,UACA,YACA,YACA,WACA,YACA,aAEFlB,gBAAiB,CACf,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAEFiD,YAAa,yBAIbG,EAAkB,CACtBR,IAAK,CACHC,OAAQ,CAAE,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAClLC,SAAU,CAAC,CACTC,MAAO,oBACPC,MAAM,EACN9B,KAAM,CACJ,QACA,QACA,QACA,QACA,MACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,MACA,QACA,MACA,QACA,QACA,QACA,QACA,QACA,SAEFlB,gBAAiB,CACf,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAEFiD,YAAa,sBACZ,CACDF,MAAO,4BACPC,MAAM,EACN9B,KAAM,CACJ,SACR,QACA,SACA,QACA,QACA,QACA,SACA,QACA,SACA,SACA,SACA,QACA,SACA,SACA,SACA,SACA,MACA,QACA,QACA,SACA,SACA,UAEMlB,gBAAiB,CACf,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAEFiD,YAAa,wBAGjBC,QAAS,CACPL,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACjFC,SAAU,CAAC,CACTC,MAAO,wBACPC,MAAM,EACN9B,KAAM,CACJ,YACA,YACA,YACA,YACA,YACA,YACA,OACA,YACA,YACA,aAEFlB,gBAAiB,CACf,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAEFiD,YAAa,sBACZ,CACDF,MAAO,gCACPC,MAAM,EACN9B,KAAM,CACJ,WACA,YACA,YACA,YACA,UACA,YACA,YACA,WACA,YACA,aAEFlB,gBAAiB,CACf,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAEFiD,YAAa,yBAIbI,EAAkB,CAEtBT,IAAK,CACHC,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACjEC,SAAU,CAAC,CACTC,MAAO,oBACPC,MAAM,EACN9B,KAAM,CACJ,SACA,SACA,OACA,SACA,SACA,SACA,SACA,UAEFlB,gBAAiB,CACf,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAEFiD,YAAa,sBACZ,CACDF,MAAO,4BACPC,MAAM,EACN9B,KAAM,CACJ,YACA,YACA,YACA,YACA,WACA,WACA,UACA,aAEFlB,gBAAiB,CACf,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAEFiD,YAAa,wBAGjBC,QAAS,CACPL,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACzDC,SAAU,CAAC,CACTC,MAAO,wBACPC,MAAM,EACN9B,KAAM,CACJ,YACA,YACA,YACA,UACA,WACA,YACA,aAEFlB,gBAAiB,CACf,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAEFiD,YAAa,sBACZ,CACDF,MAAO,gCACPC,MAAM,EACN9B,KAAM,CACJ,YACA,YACA,WACA,YACA,YACA,YACA,aAEFlB,gBAAiB,CACf,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAEFiD,YAAa,yBAIbK,EAAkB,CAEtBV,IAAK,CACHC,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACjFC,SAAU,CAAC,CACTC,MAAO,oBACPC,MAAM,EACN9B,KAAM,CACJ,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAEFlB,gBAAiB,CACf,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAEFiD,YAAa,sBACZ,CACDF,MAAO,4BACPC,MAAM,EACN9B,KAAM,CACJ,UACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFlB,gBAAiB,CACf,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAEFiD,YAAa,wBAGjBC,QAAS,CACPL,OAAQ,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACjFC,SAAU,CAAC,CACTC,MAAO,wBACPC,MAAM,EACN9B,KAAM,CACJ,YACA,YACA,YACA,YACA,YACA,MACA,MACA,MACA,MACA,OAEFlB,gBAAiB,CACf,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,qBACA,sBAEFiD,YAAa,sBACZ,CACDF,MAAO,gCACPC,MAAM,EACN9B,KAAM,CACJ,YACA,YACA,YACA,WACA,YACA,YACA,YACA,YACA,YACA,aAEFlB,gBAAiB,CACf,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,QAEFiD,YAAa,yBAqCJM,4GA/BOvC,EAAMwC,GACxB,IAAItC,EAAO,GAEX,OAAQsC,GACN,KAAMnB,EAAQC,WACZpB,EAAOyB,EAAoB3B,GAC3B,MACF,KAAMqB,EAAQE,MACZrB,EAAOiC,EAAenC,GACtB,MACF,KAAMqB,EAAQG,OACZtB,EAAOkC,EAAgBpC,GACvB,MACF,KAAMqB,EAAQI,OACZvB,EAAOmC,EAAgBrC,GACvB,MACF,KAAMqB,EAAQK,OACZxB,EAAOoC,EAAgBtC,GACvB,MACF,QACEE,EAAO,GAGX,OAAOA,2CAIP,OAAOmB,WCllBIoB,cAvCb,SAAAA,EAAYvE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmE,IACjBtE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqE,GAAAhE,KAAAH,KAAMJ,KAwBRwE,aAAe,SAAC1C,EAAMwC,GACpBrE,EAAKS,SAAS,CACZgB,UAAW2C,EAAWG,aAAa1C,EAAMwC,MAzB3CrE,EAAKO,MAAQ,CACTkB,UAAU,GACVI,KAAM,GACNwC,QAAS,IALIrE,yFASO4B,GAAW,IAAA4C,EAAArE,KACnCA,KAAKM,SAAS,CACZoB,KAAOD,EAAUC,KACjBwC,QAAUzC,EAAUyC,SACnB,WAAOG,EAAKD,aAAaC,EAAKjE,MAAMsB,KAAM2C,EAAKjE,MAAM8D,wDAGrC,IAAAI,EAAAtE,KACfA,KAAKM,SAAS,CACZoB,KAAM1B,KAAKJ,MAAM8B,KACjBwC,QAASlE,KAAKJ,MAAMsE,SACnB,WACDI,EAAKF,aAAaE,EAAKlE,MAAMsB,KAAM4C,EAAKlE,MAAM8D,4CAUpD,OACMvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kDACXH,EAAAC,EAAAC,cAAC0D,EAAD,CAAY7C,KAAM1B,KAAKI,MAAMsB,KAAMJ,UAAWtB,KAAKI,MAAMkB,UAAWgB,eAAe,mBAnC7EQ,aCDdC,EAAUkB,EAAWO,iBACrBC,EAAwB,CAC1BnB,IAAM3C,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8D,SAAA,KACN/D,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,OAGAH,EAAAC,EAAAC,cAAA,mBAGAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,cACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,WACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,iBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,mBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,2BAEFH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,gCAGAH,EAAAC,EAAAC,cAAA,iDAGAF,EAAAC,EAAAC,cAAA,gCAGAF,EAAAC,EAAAC,cAAA,8DAGAF,EAAAC,EAAAC,cAAA,kCAKA+C,QAAUjD,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8D,SAAA,KACV/D,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,WAGAH,EAAAC,EAAAC,cAAA,mBAGAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,gCACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,WACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,yBAEFH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,+BAGAH,EAAAC,EAAAC,cAAA,+CAGAF,EAAAC,EAAAC,cAAA,gCAGAF,EAAAC,EAAAC,cAAA,mIAGAF,EAAAC,EAAAC,cAAA,mCAKE8D,EAAoB,CACxBrB,IAAM3C,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8D,SAAA,KACN/D,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,OAGAH,EAAAC,EAAAC,cAAA,mBAGAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,gBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,iBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,YACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,aAEFH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,gCAGAH,EAAAC,EAAAC,cAAA,0DAGAF,EAAAC,EAAAC,cAAA,gCAGAF,EAAAC,EAAAC,cAAA,uHAIAF,EAAAC,EAAAC,cAAA,sCAKA+C,QAAUjD,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8D,SAAA,KACV/D,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,WAGAH,EAAAC,EAAAC,cAAA,mBAGAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,gBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,qBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,uBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,aACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,kBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,WAEFH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,+BAGAH,EAAAC,EAAAC,cAAA,yFAGAF,EAAAC,EAAAC,cAAA,gCAGAF,EAAAC,EAAAC,cAAA,kNAKAF,EAAAC,EAAAC,cAAA,uCAKI+D,EAAmB,CACvBtB,IAAM3C,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8D,SAAA,KACN/D,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,OAGAH,EAAAC,EAAAC,cAAA,mBAGAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,mCAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,sBAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,iBAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,6BAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,gBAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,8BAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,sCAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,0DAIFH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,gCAGAH,EAAAC,EAAAC,cAAA,oLAIAF,EAAAC,EAAAC,cAAA,gCAGAF,EAAAC,EAAAC,cAAA,yLAOAF,EAAAC,EAAAC,cAAA,kCAKA+C,QAAUjD,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8D,SAAA,KACV/D,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,WAGAH,EAAAC,EAAAC,cAAA,mBAGAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,iBAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,6CAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,WAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,uBAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,8BAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,mBAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,qBAGAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,0CAIFH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,gCAGAH,EAAAC,EAAAC,cAAA,iDAGAF,EAAAC,EAAAC,cAAA,gCAGAF,EAAAC,EAAAC,cAAA,+DAGAF,EAAAC,EAAAC,cAAA,mCAKIgE,EAAoB,CACxBvB,IAAM3C,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8D,SAAA,KACN/D,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,OAGAH,EAAAC,EAAAC,cAAA,mBAGAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,YACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,iBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,aAEFH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,gCAGAH,EAAAC,EAAAC,cAAA,4CAGAF,EAAAC,EAAAC,cAAA,gCAGAF,EAAAC,EAAAC,cAAA,iHAGAF,EAAAC,EAAAC,cAAA,sCAKA+C,QAAUjD,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8D,SAAA,KACV/D,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,WAGAH,EAAAC,EAAAC,cAAA,mBAGAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,UACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,WACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,UAEFH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,gCAGAH,EAAAC,EAAAC,cAAA,gDAGAF,EAAAC,EAAAC,cAAA,gCAGAF,EAAAC,EAAAC,cAAA,+EAGAF,EAAAC,EAAAC,cAAA,mCAKIiE,EAAoB,CACxBxB,IAAM3C,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8D,SAAA,KACN/D,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,OAGAH,EAAAC,EAAAC,cAAA,mBAGAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,YACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,iBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,aAEFH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,gCAGAH,EAAAC,EAAAC,cAAA,iDAGAF,EAAAC,EAAAC,cAAA,gCAGAF,EAAAC,EAAAC,cAAA,wGAGAF,EAAAC,EAAAC,cAAA,kCAKA+C,QAAUjD,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8D,SAAA,KACV/D,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,WAGAH,EAAAC,EAAAC,cAAA,mBAGAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,mBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,gCACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,+BACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,yBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,eACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,0BAAd,6BAEFH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAb,+BAGAH,EAAAC,EAAAC,cAAA,+CAGAF,EAAAC,EAAAC,cAAA,gCAGAF,EAAAC,EAAAC,cAAA,gOAKAF,EAAAC,EAAAC,cAAA,mCAgEakE,cAzDX,SAAAA,EAAYnF,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+E,IACflF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiF,GAAA5E,KAAAH,KAAMJ,KAsBRoF,eAAiB,SAACtD,EAAMwC,GACpB,IAAIe,EAAU,GACd,OAAOf,GACH,KAAKnB,EAAQC,WACXiC,EAAUR,EAAsB/C,GAChC,MACF,KAAKqB,EAAQE,MACXgC,EAAUL,EAAiBlD,GAC3B,MACF,KAAKqB,EAAQK,OACX6B,EAAUH,EAAkBpD,GAC5B,MACF,KAAKqB,EAAQI,OACX8B,EAAUJ,EAAkBnD,GAC5B,MACF,KAAKqB,EAAQG,OACX+B,EAAUN,EAAkBjD,GAC5B,MACF,QACAuD,EAAUtE,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8D,SAAA,MAGd,OAAOO,GA3CTpF,EAAKO,MAAQ,CACXsB,KAAM,GACNwC,QAAS,IAJIrE,oFASfG,KAAKM,SAAS,CACZoB,KAAM1B,KAAKJ,MAAM8B,KACjBwC,QAASlE,KAAKJ,MAAMsE,4DAKEzC,GACxBzB,KAAKM,SAAS,CACVoB,KAAOD,EAAUC,KACjBwC,QAASzC,EAAUyC,2CA6BvB,OACAvD,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,yBACCb,KAAKgF,eAAehF,KAAKI,MAAMsB,KAAM1B,KAAKI,MAAM8D,iBApDnCpB,aCvWpBoC,EAAa,CACjB5B,IAAK,MACLM,QAAS,WAGLuB,cAEJ,SAAAA,EAAYvF,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmF,IACjBtF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqF,GAAAhF,KAAAH,KAAMJ,KAoBRwF,eAAiB,SAACC,GAChBxF,EAAKS,SAAS,CAACW,UAAWoE,EAAEC,OAAOC,aAAa,YAtB/B1F,EAyBnB2F,cAAgB,SAACC,GACf,OAAQ9E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CACtB2E,EAAWC,IAAK,SAACzE,EAAW0E,GAAZ,OAAuBhF,EAAAC,EAAAC,cAAC+E,EAAD,CAAO1E,QAASrB,EAAKuF,eAAgBnE,UAAWA,EAAW4E,IAAKF,QAzBxG9F,EAAKO,MAAQ,CACXa,UAAW,GACXiD,QAAS,IAJMrE,oFASjBG,KAAKM,SAAS,CACZ4D,QAASlE,KAAKJ,MAAMsE,QACpBjD,UAAWiE,EAAW5B,wDAIA7B,GACxBzB,KAAKM,SAAS,CACZ4D,QAASzC,EAAUyC,2CAerB,OACIvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACZgF,EAAc9F,KAAKI,MAAM8D,SAE1BvD,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,qDACCb,KAAKwF,cAAc1F,OAAOiG,OAAOb,IAClCvE,EAAAC,EAAAC,cAACmF,EAAD,CAAO9B,QAASlE,KAAKI,MAAM8D,QAASxC,KAAM1B,KAAKI,MAAMa,aAGrDN,EAAAC,EAAAC,cAACoF,EAAD,CAAavE,KAAM1B,KAAKI,MAAMa,UAAWiD,QAASlE,KAAKI,MAAM8D,kBA5C/CpB,aAkDpBgD,EAAgB,SAAChE,GACrB,OAAOnB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAegB,IAGvBqD,sCCzDTe,EAAU,CACd3C,OAAQ,CACN,uBACA,SACA,eACA,UACA,sBACA,qBAEFC,SAAU,CAAC,CACT5B,KAAM,CAAC,IAAK,IAAK,KAAM,KAAM,GAAI,IACjClB,gBAAiB,CACjB,SACA,OACA,QACA,SACA,SACA,OAEAyF,qBAAsB,CACtB,SACA,OACA,QACA,SACA,SACA,UAKEC,EAAU,CACd7C,OAAQ,CACN,YACA,SACA,gBACA,WACA,WACA,eAEFC,SAAU,CAAC,CACT5B,KAAM,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,MACrClB,gBAAiB,CACjB,SACA,OACA,QACA,SACA,SACA,OAEAyF,qBAAsB,CACtB,SACA,OACA,QACA,SACA,SACA,UAKEtE,EAAU,CACdwE,qBAAqB,EACrBC,YAAY,EACZnE,OAAQ,CACNE,SAAU,OACVkB,OAAQ,CACNgD,SAAU,MA2FDC,cApFX,SAAAA,EAAY5G,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwG,IACf3G,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0G,GAAArG,KAAAH,KAAMJ,KACDQ,MAAO,CACR8D,QAAS,cAHErE,mFAMC,IAAAwE,EAAArE,KACP,IAAIyG,IAAQ,CAACxB,QAASyB,SAASC,eAAe,UAC/C,IAAIF,IAAQ,CAClBxB,QAASyB,SAASC,eAAe,wBACjCC,gBAAiB,CACbC,cAAc,EACdC,kBAAkB,EAClBnD,YAAa,UACboD,YAAa,IAEjBC,cAAe,SAAS/B,GACpB,IAAIgC,EAAaC,IAAGC,IAAIC,kBACvBC,OAAO,CAAC,IAAK,OACbC,MAAM,KACNC,UAAU,CAACtC,EAAQuC,YAAc,EAAGvC,EAAQwC,aAAe,IAG5D,MAAO,CAACC,KAFGR,IAAGC,IAAIO,OACjBT,WAAWA,GACQA,WAAYA,IAEpCU,MAAO,CACHC,YAAa,UACbC,IAAM,UACNC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,WAETrG,KAAM,CACFiG,IAAK,CAAEK,QAAS,OAChBJ,IAAK,CAAEI,QAAS,OAChBH,IAAK,CAAEG,QAAS,OAChBF,IAAK,CAAEE,QAAS,OAChBD,IAAK,CAAEC,QAAS,QAEpBC,KAAM,SAACC,GACHA,EAAQC,IAAIC,UAAU,qBAAqBC,GAAG,QAAS,SAACC,GACpD,IAAMC,EAAc3I,OAAOiG,OAAO9B,EAAWO,kBACzCkE,EAAiBF,EAAUG,WAAWC,KACvCH,EAAYI,SAASH,IACtBrE,EAAK/D,SAAS,CAAC4D,QAASwE,0CAQxC,OACE/H,EAAAC,EAAAC,cAAAF,EAAAC,EAAA8D,SAAA,KACE/D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BAA6BC,MAAO,CAACsB,SAAU,QAASyG,MAAO,SAC5EnI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYC,MAAO,CAACP,MAAM,QAAS0B,SAAS,SAA3D,8BAGJvB,EAAAC,EAAAC,cAAA,OAAKkI,GAAG,OAAOhI,MAAO,CAACiI,OAAQ,OAAQF,MAAO,SAC9CnI,EAAAC,EAAAC,cAAA,OAAKkI,GAAG,uBAAuBhI,MAAO,CAACiI,OAAQ,QAASF,MAAO,UAC/DnI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAACoI,EAAD,CAAc/E,QAASlE,KAAKI,MAAM8D,UAClCvD,EAAAC,EAAAC,cAAA,2BAGAF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEC,KAAMwE,EACNvE,QAAS,CAACA,aAEZlB,EAAAC,EAAAC,cAAA,+BAGAF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEC,KAAMsE,EACNrE,QAAS,CAACA,sBA9EgBiB,aClErBoG,mLANX,OACEvI,EAAAC,EAAAC,cAACsI,EAAD,aAJYrG,aCSEsG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/I,EAAAC,EAAAC,cAAC8I,EAAD,MAASjD,SAASC,eAAe,SD2H3C,kBAAmBiD,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.614673e9.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\n\r\nclass Badge extends PureComponent {\r\n    \r\n  static defaultProps = {\r\n    fontColor: \"white\",\r\n    backgroundColor: \"rgb(158, 230, 152)\",\r\n    cursor: \"pointer\"\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      badgeStyle : {}\r\n    }\r\n};\r\n\r\n  componentWillMount() {\r\n    this.setState({\r\n      badgeStyle: {\r\n          cursor:this.props.cursor,\r\n          color: this.props.fontColor,\r\n          backgroundColor: this.props.backgroundColor\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n          <h2>\r\n            <span className=\"badge badge-success\" style={this.state.badgeStyle} value={this.props.graphType}  onClick={this.props.onClick}>\r\n                {this.props.graphType}\r\n            </span>\r\n          </h2>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Badge;\r\n","import React, {Component} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nclass LineChart extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      chartData: {},\r\n      yAxesLabel: \"\",\r\n      xAxesLabel: \"\"\r\n    }\r\n  }\r\n\r\n  static defaultProps = {\r\n    type: \"GDP\",\r\n    displayTitle:true,\r\n    displayLegend: true,\r\n    legendPosition:'right',\r\n    yAxesLabel: \"USD million\",\r\n    xAxesLabel: \"Year (Christian era)\"\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.setState({\r\n      chartData: this.props.chartData,\r\n      yAxesLabel: this.props.yAxesLabel,\r\n      xAxesLabel: this.props.xAxesLabel\r\n    })\r\n  }\r\n  \r\n  componentWillReceiveProps(nextProps ){\r\n    this.setState({\r\n                    type : nextProps.type,\r\n                    chartData: nextProps.chartData,\r\n                    yAxesLabel: nextProps.yAxesLabel,\r\n                    xAxesLabel: nextProps.xAxesLabel\r\n    })\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <div className=\"chart\">\r\n        <Line\r\n          data={this.state.chartData}\r\n          options={{\r\n            title:{\r\n              display:this.props.displayTitle,\r\n              text: this.props.type,\r\n              fontSize:25\r\n            },\r\n            legend:{\r\n              display:this.props.displayLegend,\r\n              position:this.props.legendPosition\r\n            },\r\n            scales: {\r\n                xAxes: [{\r\n                    ticks: {\r\n                        beginAtZero:true\r\n                    },\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: this.state.xAxesLabel,\r\n                        fontSize: 20\r\n                    }\r\n                }],\r\n                yAxes: [{\r\n                  ticks: {\r\n                      beginAtZero:true\r\n                  },\r\n                  scaleLabel: {\r\n                      display: true,\r\n                      labelString: this.state.yAxesLabel,\r\n                      fontSize: 20\r\n                  }\r\n              }]\r\n            }\r\n          }}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LineChart;","const Country = {\r\n  BANGLADESH: 'Bangladesh',\r\n  INDIA: 'India',\r\n  ISRAEL: 'Israel',\r\n  KUWAIT: 'Kuwait',\r\n  TURKEY: 'Turkey'\r\n}\r\n\r\nconst bangladeshChartData = {\r\n  GDP: {\r\n    labels: ['2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017'],\r\n    datasets: [{\r\n      label: 'GDP from datasets',\r\n      fill: false,\r\n      data: [\r\n        102480,\r\n        115280,\r\n        128640,\r\n        133360,\r\n        149990,\r\n        172850,\r\n        195080,\r\n        221420,\r\n        249720\r\n      ],\r\n      backgroundColor: [\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\"\r\n      ],\r\n      borderColor: \"rgb(146, 226, 253)\"\r\n    }, {\r\n      label: 'GDP from regression model',\r\n      fill: false,\r\n      data: [\r\n        101782.0518,\r\n        110464.937,\r\n        124414.5818,\r\n        139672.5299,\r\n        157042.4934,\r\n        173338.9773,\r\n        194186.5677,\r\n        220261.7805,\r\n        247576.8064\r\n      ],\r\n      backgroundColor: [\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\"\r\n      ],\r\n      borderColor: \"rgb(200, 148, 166)\"\r\n    }]\r\n  },\r\n  Revenue: {\r\n    labels: ['2010', '2011', '2012', '2013', '2014', '2015'],\r\n    datasets: [{\r\n      label: 'Revenue from datasets',\r\n      fill: false,\r\n      data: [\r\n        998712.2,\r\n        1140588.6,\r\n        1419108.7,\r\n        1620084.1,\r\n        1760784.2,\r\n        1779483.0\r\n      ],\r\n      backgroundColor: [\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\"\r\n      ],\r\n      borderColor: \"rgb(146, 226, 253)\"\r\n    }, {\r\n      label: 'Revenue from regression model',\r\n      fill: false,\r\n      data: [\r\n        1000990.54,\r\n        1138967.937,\r\n        1417602.626,\r\n        1618919.03,\r\n        1761196.702,\r\n        1781115.358\r\n      ],\r\n      backgroundColor: [\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\"\r\n      ],\r\n      borderColor: \"rgb(200, 148, 166)\"\r\n    }]\r\n  }\r\n}\r\nconst indiaChartData = {\r\n  GDP: {\r\n    labels: ['2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016'],\r\n    datasets: [{\r\n      label: 'GDP from datasets',\r\n      fill: false,\r\n      data: [\r\n        457148.3077,\r\n        521615.8142,\r\n        608196.2964,\r\n        704936.2412,\r\n        815933.3996,\r\n        939831.2288,\r\n        1115209.154,\r\n        1344050.709,\r\n        1417387.446,\r\n        1507903.099,\r\n        1619641.929,\r\n        1751714.65,\r\n        1876308.761\r\n      ],\r\n      backgroundColor: [\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\"\r\n      ],\r\n      borderColor: \"rgb(146, 226, 253)\"\r\n    }, {\r\n      label: 'GDP from regression model',\r\n      fill: false,\r\n      data: [\r\n        463966.0712,\r\n        522372.8025,\r\n        604244.4364,\r\n        703200.5762,\r\n        814239.747,\r\n        931649.4903,\r\n        1126151.473,\r\n        1341924.928,\r\n        1411194.771,\r\n        1512426.328,\r\n        1619484.402,\r\n        1752842.877,\r\n        1876179.041\r\n      ],\r\n      backgroundColor: [\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\"\r\n      ],\r\n      borderColor: \"rgb(200, 148, 166)\"\r\n    }]\r\n  },\r\n  Revenue: {\r\n    labels: [\"2009\", '2010', '2011', '2012', '2013', '2014', '2015', \"2016\", \"2017\", \"2018\"],\r\n    datasets: [{\r\n      label: 'Revenue from datasets',\r\n      fill: false,\r\n      data: [\r\n        88124.92308,\r\n        121303.3846,\r\n        115605.5385,\r\n        135266.6154,\r\n        156111.2308,\r\n        169457.6923,\r\n        183850,\r\n        211415.8462,\r\n        231604.3077,\r\n        265498.1538\r\n      ],\r\n      backgroundColor: [\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\"\r\n      ],\r\n      borderColor: \"rgb(146, 226, 253)\"\r\n    }, {\r\n      label: 'Revenue from regression model',\r\n      fill: false,\r\n      data: [\r\n        86843.0068,\r\n        112223.1506,\r\n        123571.1504,\r\n        139331.7385,\r\n        157369.64,\r\n        173476.8576,\r\n        184907.1642,\r\n        199814.583,\r\n        236886.0638,\r\n        263814.5172\r\n      ],\r\n      backgroundColor: [\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\"\r\n      ],\r\n      borderColor: \"rgb(200, 148, 166)\"\r\n    }]\r\n  }\r\n}\r\nconst israelChartData = {\r\n  GDP: {\r\n    labels: [ '1995', '1996', '1997', '1998', '1999', '2000', '2001', '2002', '2003', '2004', '2005', '2006', '2007', '2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016'],\r\n    datasets: [{\r\n      label: 'GDP from datasets',\r\n      fill: false,\r\n      data: [\r\n        10034.3000000,\r\n        10995.7000000,\r\n        11472.5000000,\r\n        11597.9000000,\r\n        11719.0000000,\r\n        13233.9000000,\r\n        13070.6000000,\r\n        12106.9000000,\r\n        12686.5000000,\r\n        13544.5000000,\r\n        14246.3000000,\r\n        15396.7000000,\r\n        17870.7000000,\r\n        21584.0000000,\r\n        20741.9000000,\r\n        23361.0000000,\r\n        26162.9000000,\r\n        25729.7000000,\r\n        29248.9000000,\r\n        30841.7000000,\r\n        29909.4000000,\r\n        31774.8000000\r\n      ],\r\n      backgroundColor: [\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\"\r\n      ],\r\n      borderColor: \"rgb(146, 226, 253)\"\r\n    }, {\r\n      label: 'GDP from regression model',\r\n      fill: false,\r\n      data: [\r\n        10689.68,\r\n11202.7,\r\n11167.54,\r\n12151.7,\r\n9353.78,\r\n12475.5,\r\n18422.32,\r\n16187.1,\r\n17256.16,\r\n16597.02,\r\n14806.18,\r\n17393.9,\r\n14256.38,\r\n18246.64,\r\n21163.88,\r\n18629.88,\r\n20686.0,\r\n24176.8,\r\n30936.3,\r\n29161.56,\r\n30872.88,\r\n31486.92\r\n      ],\r\n      backgroundColor: [\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\"\r\n      ],\r\n      borderColor: \"rgb(200, 148, 166)\"\r\n    }]\r\n  },\r\n  Revenue: {\r\n    labels: [\"2009\", '2010', '2011', '2012', '2013', '2014', '2015', \"2016\", \"2017\", \"2018\"],\r\n    datasets: [{\r\n      label: 'Revenue from datasets',\r\n      fill: false,\r\n      data: [\r\n        88124.92308,\r\n        121303.3846,\r\n        115605.5385,\r\n        135266.6154,\r\n        156111.2308,\r\n        169457.6923,\r\n        183850,\r\n        211415.8462,\r\n        231604.3077,\r\n        265498.1538\r\n      ],\r\n      backgroundColor: [\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\"\r\n      ],\r\n      borderColor: \"rgb(146, 226, 253)\"\r\n    }, {\r\n      label: 'Revenue from regression model',\r\n      fill: false,\r\n      data: [\r\n        86843.0068,\r\n        112223.1506,\r\n        123571.1504,\r\n        139331.7385,\r\n        157369.64,\r\n        173476.8576,\r\n        184907.1642,\r\n        199814.583,\r\n        236886.0638,\r\n        263814.5172\r\n      ],\r\n      backgroundColor: [\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\"\r\n      ],\r\n      borderColor: \"rgb(200, 148, 166)\"\r\n    }]\r\n  }\r\n}\r\nconst kuwaitChartData = {\r\n\r\n  GDP: {\r\n    labels: ['2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017'],\r\n    datasets: [{\r\n      label: 'GDP from datasets',\r\n      fill: false,\r\n      data: [\r\n        115.4149,\r\n        154.0275,\r\n        174.07,\r\n        174.1611,\r\n        162.6314,\r\n        114.5673,\r\n        110.9123,\r\n        120.1263\r\n      ],\r\n      backgroundColor: [\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\"\r\n      ],\r\n      borderColor: \"rgb(146, 226, 253)\"\r\n    }, {\r\n      label: 'GDP from regression model',\r\n      fill: false,\r\n      data: [\r\n        130.0770291,\r\n        148.7577838,\r\n        176.0992746,\r\n        167.3058441,\r\n        159.963366,\r\n        119.645308,\r\n        97.996288,\r\n        125.8888335\r\n      ],\r\n      backgroundColor: [\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\"\r\n      ],\r\n      borderColor: \"rgb(200, 148, 166)\"\r\n    }]\r\n  },\r\n  Revenue: {\r\n    labels: ['2019', '2010', '2011', '2012', '2013', '2014', '2015'],\r\n    datasets: [{\r\n      label: 'Revenue from datasets',\r\n      fill: false,\r\n      data: [\r\n        11.70193895,\r\n        13.08804966,\r\n        13.16935125,\r\n        11.819353,\r\n        11.3204715,\r\n        12.18109186,\r\n        12.56803281\r\n      ],\r\n      backgroundColor: [\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\"\r\n      ],\r\n      borderColor: \"rgb(146, 226, 253)\"\r\n    }, {\r\n      label: 'Revenue from regression model',\r\n      fill: false,\r\n      data: [\r\n        11.68860379,\r\n        12.95798676,\r\n        13.2018622,\r\n        11.72413213,\r\n        11.32473036,\r\n        12.27099889,\r\n        12.54101327\r\n      ],\r\n      backgroundColor: [\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\"\r\n      ],\r\n      borderColor: \"rgb(200, 148, 166)\"\r\n    }]\r\n  }\r\n}\r\nconst turkeyChartData = {\r\n\r\n  GDP: {\r\n    labels: ['2008', '2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017'],\r\n    datasets: [{\r\n      label: 'GDP from datasets',\r\n      fill: false,\r\n      data: [\r\n        764336,\r\n        644640,\r\n        771902,\r\n        832524,\r\n        873982,\r\n        950579,\r\n        934186,\r\n        859797,\r\n        863722,\r\n        851549\r\n      ],\r\n      backgroundColor: [\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\"\r\n      ],\r\n      borderColor: \"rgb(146, 226, 253)\"\r\n    }, {\r\n      label: 'GDP from regression model',\r\n      fill: false,\r\n      data: [\r\n        764478.53,\r\n        644687.90,\r\n        770271.80,\r\n        831806.49,\r\n        878440.18,\r\n        947021.34,\r\n        935484.41,\r\n        859244.81,\r\n        863434.96,\r\n        851879.85\r\n      ],\r\n      backgroundColor: [\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\"\r\n      ],\r\n      borderColor: \"rgb(200, 148, 166)\"\r\n    }]\r\n  },\r\n  Revenue: {\r\n    labels: [\"2008\", \"2009\", '2010', '2011', '2012', '2013', '2014', '2015', \"2016\", \"2017\"],\r\n    datasets: [{\r\n      label: 'Revenue from datasets',\r\n      fill: false,\r\n      data: [\r\n        53324.40624,\r\n        56237.91424,\r\n        66257.32165,\r\n        77632.97722,\r\n        88489.84721,\r\n        102000.00,\r\n        114000.00,\r\n        137000.00,\r\n        155000.00,\r\n        166000.00\r\n      ],\r\n      backgroundColor: [\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\",\r\n        \"rgb(146, 226, 253)\"\r\n      ],\r\n      borderColor: \"rgb(146, 226, 253)\"\r\n    }, {\r\n      label: 'Revenue from regression model',\r\n      fill: false,\r\n      data: [\r\n        55660.92413,\r\n        61668.41296,\r\n        61745.38154,\r\n        83233.7158,\r\n        91066.22036,\r\n        100258.3353,\r\n        112065.8215,\r\n        148963.5818,\r\n        149840.3489,\r\n        168360.9795,\r\n      ],\r\n      backgroundColor: [\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\",\r\n        \"pink\"\r\n      ],\r\n      borderColor: \"rgb(200, 148, 166)\"\r\n    }]\r\n  }\r\n}\r\n\r\nclass DataSource {\r\n  static getChartData(type, country) {\r\n    let data = {}\r\n\r\n    switch (country) {\r\n      case (Country.BANGLADESH):\r\n        data = bangladeshChartData[type]\r\n        break;\r\n      case (Country.INDIA):\r\n        data = indiaChartData[type]\r\n        break;\r\n      case (Country.ISRAEL):\r\n        data = israelChartData[type]\r\n        break;\r\n      case (Country.KUWAIT):\r\n        data = kuwaitChartData[type]\r\n        break;\r\n      case (Country.TURKEY):\r\n        data = turkeyChartData[type]\r\n        break;\r\n      default:\r\n        data = {}\r\n    }\r\n\r\n    return data\r\n  }\r\n\r\n  static getCountryList() {\r\n    return Country\r\n  }\r\n}\r\n\r\nexport default DataSource;","import React, { Component } from 'react';\r\nimport LineChart from \"./LineChart\"\r\nimport DataSource from \"./DataSource\"\r\n\r\nclass Graph extends Component {\r\n    \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        chartData:{},\r\n        type: \"\",\r\n        country: \"\"\r\n      }\r\n};\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    this.setState({\r\n      type : nextProps.type,\r\n      country : nextProps.country\r\n    }, () => {this.getChartData(this.state.type, this.state.country)})\r\n  }\r\n\r\n  componentWillMount() {\r\n        this.setState({\r\n          type: this.props.type,\r\n          country: this.props.country\r\n        }, () => {\r\n          this.getChartData(this.state.type, this.state.country)\r\n        })\r\n  }\r\n  \r\n  getChartData = (type, country) => {\r\n    this.setState({\r\n      chartData: DataSource.getChartData(type, country)\r\n      })\r\n  }\r\n  render() {\r\n    return (\r\n          <div className=\"d-flex flex-column justify-content-around mt-4\">\r\n              <LineChart  type={this.state.type} chartData={this.state.chartData} legendPosition=\"bottom\"/>\r\n          </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n","import React, { Component } from 'react';\r\nimport DataSource from \"./DataSource\"\r\n\r\nconst Country = DataSource.getCountryList()\r\nconst bangladeshDescription = {\r\n    GDP : <>\r\n    <p className=\"text-center\">\r\n      GDP\r\n    </p>\r\n    <p>\r\n      Factor\r\n    </p>\r\n    <ul className=\"list-group\">\r\n      <li className=\"list-group-item\">Utilities </li>\r\n      <li className=\"list-group-item\">Agriculture</li>\r\n      <li className=\"list-group-item\">Service</li>\r\n      <li className=\"list-group-item active\">Manufacturing</li>\r\n      <li className=\"list-group-item\">Constant Prices</li>\r\n      <li className=\"list-group-item\">Gross National Product</li>\r\n    </ul>\r\n    <p className=\"mt-4\">\r\n      At significance level = 0.01\r\n    </p>\r\n    <p>\r\n      Manufacturing is an effective factor\r\n    </p>\r\n    <p>\r\n     Regression equation\r\n    </p>\r\n    <p>\r\n      GDP = - 28851.2 + 1164.8 * GDP From Manufacturing\r\n    </p>\r\n    <p>\r\n      Correlation = 0.9932\r\n    </p>\r\n    </>\r\n  ,\r\n    Revenue : <>\r\n    <p className=\"text-center\">\r\n      Revenue\r\n    </p>\r\n    <p>\r\n      Factor\r\n    </p>\r\n    <ul className=\"list-group\">\r\n      <li className=\"list-group-item active\">Corporate Tax and Sales Tax </li>\r\n      <li className=\"list-group-item active\">Non-Tax</li>\r\n      <li className=\"list-group-item active\"> Personal income Tax</li>\r\n    </ul>\r\n    <p className=\"mt-4\">\r\n      At significance level = 0.1\r\n    </p>\r\n    <p>\r\n      All factors is an effective factor\r\n    </p>\r\n    <p>\r\n     Regression equation\r\n    </p>\r\n    <p>\r\n      Revenue = - 10.13129 + 1.00986 * (Corporate Tax and Sales Tax) + 1.05979 * (non-tax) + 0.90444 * (Personal income tax)\r\n    </p>\r\n    <p>\r\n      Correlation = 1.0000\r\n    </p>\r\n    </>\r\n}\r\nconst israelDescription = {\r\n  GDP : <>\r\n  <p className=\"text-center\">\r\n    GDP\r\n  </p>\r\n  <p>\r\n    Factor\r\n  </p>\r\n  <ul className=\"list-group\">\r\n    <li className=\"list-group-item\">Agriculture </li>\r\n    <li className=\"list-group-item\">Manufacturing</li>\r\n    <li className=\"list-group-item active\">Industry</li>\r\n    <li className=\"list-group-item active\">Services</li>\r\n  </ul>\r\n  <p className=\"mt-4\">\r\n    At significance level = 0.05\r\n  </p>\r\n  <p>\r\n  Industry and Services is an effective factors\r\n  </p>\r\n  <p>\r\n   Regression equation\r\n  </p>\r\n  <p>\r\n  GDP(10^12) = 5.74 * %Agriculture - 7.366 * %Manufacturing + 12.424 * %Industry \r\n         + 8.292 * %Services - 6.996\r\n  </p>\r\n  <p>\r\n    Correlation = Don't know\r\n  </p>\r\n  </>\r\n,\r\n  Revenue : <>\r\n  <p className=\"text-center\">\r\n    Revenue\r\n  </p>\r\n  <p>\r\n    Factor\r\n  </p>\r\n  <ul className=\"list-group\">\r\n    <li className=\"list-group-item active\">Income Taxes</li>\r\n    <li className=\"list-group-item active\">Inter trade Taxes</li>\r\n    <li className=\"list-group-item\">Goods Service Taxes</li>\r\n    <li className=\"list-group-item\">Other Tax</li>\r\n    <li className=\"list-group-item active\">Social Contrib</li>\r\n    <li className=\"list-group-item active\">Grants</li>\r\n  </ul>\r\n  <p className=\"mt-4\">\r\n    At significance level = 0.1\r\n  </p>\r\n  <p>\r\n    All factors is an effective factors except Goods Service Taxes and Other Tax\r\n  </p>\r\n  <p>\r\n   Regression equation\r\n  </p>\r\n  <p>\r\n       Revenue (% to GDP) = 2.2046 * %IncomeTaxes + 2.2133 * %InternationalTradeTaxes\r\n        + 1.1327 * %GoodsAndServicesTaxes + 2.2991 * %SocialContributions + 1.9483 * %OtherTaxes\r\n        + 2.3424 * %Grants - 154.8590\r\n  </p>\r\n  <p>\r\n    Correlation = Don't know\r\n  </p>\r\n  </>\r\n}\r\nconst indiaDescription = {\r\n  GDP : <>\r\n  <p className=\"text-center\">\r\n    GDP\r\n  </p>\r\n  <p>\r\n    Factor\r\n  </p>\r\n  <ul className=\"list-group\">\r\n    <li className=\"list-group-item active\">\r\n    Agriculture, Forestry & Fishing \r\n    </li>\r\n    <li className=\"list-group-item active\">\r\n Mining & Quarrying\r\n    </li>\r\n    <li className=\"list-group-item\">\r\nManufacturing\r\n    </li>\r\n    <li className=\"list-group-item\">\r\nElect. Gas & Water supply\r\n    </li>\r\n    <li className=\"list-group-item\">\r\nConstruction\r\n    </li>\r\n    <li className=\"list-group-item\">\r\nTrade, Hotels & Restaurant\r\n    </li>\r\n    <li className=\"list-group-item active\">\r\n    Transport, Storage & Communication\r\n    </li>\r\n    <li className=\"list-group-item active\">\r\nFinancing, Insurance, Real estate & Business services\r\n    </li>\r\n  </ul>\r\n  <p className=\"mt-4\">\r\n    At significance level = 0.01\r\n  </p>\r\n  <p>\r\n  Agriculture,forestry & Fishing, Mining & Quarrying, Transport,storage & Communication and Financing, Insurance, Real estate & Business services\r\n     is an effective factors\r\n  </p>\r\n  <p>\r\n   Regression equation\r\n  </p>\r\n  <p>\r\n  GDP = -11710.01 \r\n    + (1.882553 * GDP of Agriculture,forestry & fishing) \r\n    + (6.003632 * GDP of Mining & quarrying)           \t\r\n    + (2.614242 * GDP of Transport)                                                                                        \r\n    + (1.972493 * GDP of Services)\r\n  </p>\r\n  <p>\r\n    Correlation = 0.9999\r\n  </p>\r\n  </>\r\n,\r\n  Revenue : <>\r\n  <p className=\"text-center\">\r\n    Revenue\r\n  </p>\r\n  <p>\r\n    Factor\r\n  </p>\r\n  <ul className=\"list-group\">\r\n    <li className=\"list-group-item active\">\r\n    Corporate Tax  \r\n    </li>\r\n    <li className=\"list-group-item\">\r\n    Taxes on Income other than CorporationTax\r\n    </li>\r\n    <li className=\"list-group-item\"> \r\n    Customs\r\n    </li>\r\n    <li className=\"list-group-item\"> \r\n    Union Excise Duties\r\n    </li>\r\n    <li className=\"list-group-item\"> \r\n    Taxes of Union Territories\r\n    </li>\r\n    <li className=\"list-group-item\"> \r\n    Social Services\r\n    </li>\r\n    <li className=\"list-group-item\"> \r\n    Economic Services\r\n    </li>\r\n    <li className=\"list-group-item\"> \r\n    Union Territories without Legislature\r\n    </li>\r\n  </ul>\r\n  <p className=\"mt-4\">\r\n    At significance level = 0.01\r\n  </p>\r\n  <p>\r\n  Corporate Tax is an effective factor\r\n  </p>\r\n  <p>\r\n   Regression equation\r\n  </p>\r\n  <p>\r\n  Revenue = -28257.26 + (3.057112 * Corporation Tax)\r\n  </p>\r\n  <p>\r\n    Correlation = 0.9877\r\n  </p>\r\n  </>\r\n}\r\nconst kuwaitDescription = {\r\n  GDP : <>\r\n  <p className=\"text-center\">\r\n    GDP\r\n  </p>\r\n  <p>\r\n    Factor\r\n  </p>\r\n  <ul className=\"list-group\">\r\n    <li className=\"list-group-item\">Agriculture</li>\r\n    <li className=\"list-group-item active\">Industry</li>\r\n    <li className=\"list-group-item\">Manufacturing</li>\r\n    <li className=\"list-group-item\">Services</li>\r\n  </ul>\r\n  <p className=\"mt-4\">\r\n    At significance level = 0.01\r\n  </p>\r\n  <p>\r\n    Industry is an effective factor\r\n  </p>\r\n  <p>\r\n   Regression equation\r\n  </p>\r\n  <p>\r\n  GDP = -550.225 - 163.734 * agriculture + 7.636 * industry + 13.220 * manufacturing + 4.108 * service\r\n  </p>\r\n  <p>\r\n    Correlation = Don't know\r\n  </p>\r\n  </>\r\n,\r\n  Revenue : <>\r\n  <p className=\"text-center\">\r\n    Revenue\r\n  </p>\r\n  <p>\r\n    Factor\r\n  </p>\r\n  <ul className=\"list-group\">\r\n    <li className=\"list-group-item active\">Grants</li>\r\n    <li className=\"list-group-item active\">Service</li>\r\n    <li className=\"list-group-item active\">Trade</li>\r\n  </ul>\r\n  <p className=\"mt-4\">\r\n    At significance level = 0.01\r\n  </p>\r\n  <p>\r\n    All factors is an effective factors\r\n  </p>\r\n  <p>\r\n   Regression equation\r\n  </p>\r\n  <p>\r\n  Revenue = 3171.46 - 31.6 * Grants - 33.67 * Service - 30.6 * Trade\r\n  </p>\r\n  <p>\r\n    Correlation = 0.6204\r\n  </p>\r\n  </>\r\n}\r\nconst turkeyDescription = {\r\n  GDP : <>\r\n  <p className=\"text-center\">\r\n    GDP\r\n  </p>\r\n  <p>\r\n    Factor\r\n  </p>\r\n  <ul className=\"list-group\">\r\n    <li className=\"list-group-item active\">Agriculture</li>\r\n    <li className=\"list-group-item\">Industry</li>\r\n    <li className=\"list-group-item\">Manufacturing</li>\r\n    <li className=\"list-group-item active\">Services</li>\r\n  </ul>\r\n  <p className=\"mt-4\">\r\n    At significance level = 0.01\r\n  </p>\r\n  <p>\r\n    Manufacturing is an effective factor\r\n  </p>\r\n  <p>\r\n   Regression equation\r\n  </p>\r\n  <p>\r\n  GDP = 1.4171010 + 1.641agriculture + 2.188industry - 1.527manufacuring + 9.64610 - services\r\n  </p>\r\n  <p>\r\n    Correlation = 0.9879\r\n  </p>\r\n  </>\r\n,\r\n  Revenue : <>\r\n  <p className=\"text-center\">\r\n    Revenue\r\n  </p>\r\n  <p>\r\n    Factor\r\n  </p>\r\n  <ul className=\"list-group\">\r\n    <li className=\"list-group-item active\">taxes_on_income</li>\r\n    <li className=\"list-group-item active\">taxes_on_international_trade</li>\r\n    <li className=\"list-group-item active\">taxes_on_goods_and_services</li>\r\n    <li className=\"list-group-item active\">social_contributions </li>\r\n    <li className=\"list-group-item active\">other_taxes</li>\r\n    <li className=\"list-group-item active\">grants_and_other_revenue</li>\r\n  </ul>\r\n  <p className=\"mt-4\">\r\n    At significance level = 0.1\r\n  </p>\r\n  <p>\r\n    All factors is an effective factor\r\n  </p>\r\n  <p>\r\n   Regression equation\r\n  </p>\r\n  <p>\r\n  Revenue = -15989604 + 159882  taxes_on_income + 160293  taxes_on_international_trade\r\n        + 159886  taxes_on_goods_and_services + 159908 social_contributions  \r\n        + 159917   other_taxes  + 159890  grants_and_other_revenue   \r\n  </p>\r\n  <p>\r\n    Correlation = 0.9839\r\n  </p>\r\n  </>\r\n}\r\n\r\nclass Description extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          type: \"\",\r\n          country: \"\"\r\n        };\r\n      }\r\n\r\n      componentWillMount() {\r\n        this.setState({\r\n          type: this.props.type,\r\n          country: this.props.country\r\n          }\r\n          )\r\n      }\r\n\r\n      componentWillReceiveProps(nextProps) {\r\n        this.setState({\r\n            type : nextProps.type,\r\n            country: nextProps.country\r\n        })\r\n      }\r\n\r\n      getDescription = (type, country) => {\r\n          let element = \"\"\r\n          switch(country) {\r\n              case Country.BANGLADESH:\r\n                element = bangladeshDescription[type]    \r\n                break;\r\n              case Country.INDIA:\r\n                element = indiaDescription[type]    \r\n                break;\r\n              case Country.TURKEY:\r\n                element = turkeyDescription[type]    \r\n                break;\r\n              case Country.KUWAIT:\r\n                element = kuwaitDescription[type]    \r\n                break;\r\n              case Country.ISRAEL:\r\n                element = israelDescription[type]    \r\n                break;\r\n              default:\r\n              element = <></>\r\n          }\r\n\r\n          return element\r\n      }\r\n      render() {\r\n        return (\r\n        <section>\r\n            <h3>Description</h3>\r\n            {this.getDescription(this.state.type, this.state.country)}\r\n        </section>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Description;","import React, { Component } from 'react';\r\nimport Badge from \"./Badge\"\r\nimport Graph from \"./Graph\"\r\nimport Description from './Description';\r\n\r\nconst GraphTypes = {\r\n  GDP: 'GDP',\r\n  Revenue: 'Revenue'\r\n  };\r\n\r\nclass CountryCard extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      graphType: \"\",\r\n      country: \"\"\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.setState({\r\n      country: this.props.country,\r\n      graphType: GraphTypes.GDP\r\n      })\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    this.setState({\r\n      country: nextProps.country\r\n    })\r\n  }\r\n\r\n  onSetGraphType = (e) => {\r\n    this.setState({graphType: e.target.getAttribute(\"value\")})\r\n  }\r\n\r\n  badgesSection = (graphTypes) => {\r\n    return  <div className=\"d-flex flex-row justify-content-around mt-3\">\r\n    {graphTypes.map( (graphType, index) =>  <Badge onClick={this.onSetGraphType} graphType={graphType} key={index} />)}\r\n  </div>\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"d-flex flex-column mt-3\">\r\n          {headerSection(this.state.country)}\r\n            {/* wrap me to charts section pls*/}\r\n          <section>\r\n            <h3>Chart from Datasets vs Regression model</h3>\r\n            {this.badgesSection(Object.values(GraphTypes))}\r\n            <Graph country={this.state.country} type={this.state.graphType} />\r\n          </section>\r\n          {/* -- */}\r\n            <Description type={this.state.graphType} country={this.state.country} />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst headerSection = (title) => {\r\n  return <h1 className=\"text-center\">{title}</h1>\r\n}\r\n\r\nexport default CountryCard;\r\n","import React, { Component } from 'react';\r\nimport CountryCard from \"./CountryCard\"\r\nimport DataSource from \"./DataSource\"\r\nimport Datamap from 'datamaps/dist/datamaps.world.min.js';\r\nimport d3 from 'd3';\r\nimport {Pie} from 'react-chartjs-2'\r\n\r\nconst taxData = {\r\n  labels: [\r\n    'Social Contributions',\r\n    'Grants',\r\n    'Coporate Tax',\r\n    'Non Tax',\r\n    'Personal income Tax',\r\n    'Trade Tax / Goods',\r\n  ],\r\n  datasets: [{\r\n    data: [8.3, 8.3, 16.7, 16.7, 25, 25],\r\n    backgroundColor: [\r\n    'purple',\r\n    'blue',\r\n    'green',\r\n    'yellow',\r\n    'orange',\r\n    'red'\r\n    ],\r\n    hoverBackgroundColor: [\r\n    'purple',\r\n    'blue',\r\n    'green',\r\n    'yellow',\r\n    'orange',\r\n    'red'\r\n    ]\r\n  }]\r\n};\r\n\r\nconst gdpData = {\r\n  labels: [\r\n    'Transport',\r\n    'Mining',\r\n    'Manufacturing',\r\n    'Industry',\r\n    'Services',\r\n    'Agriculture',\r\n  ],\r\n  datasets: [{\r\n    data: [10.5, 10.5, 10.5, 17.1, 34.3, 17.1],\r\n    backgroundColor: [\r\n    'purple',\r\n    'blue',\r\n    'green',\r\n    'yellow',\r\n    'orange',\r\n    'red'\r\n    ],\r\n    hoverBackgroundColor: [\r\n    'purple',\r\n    'blue',\r\n    'green',\r\n    'yellow',\r\n    'orange',\r\n    'red'\r\n    ]\r\n  }]\r\n};\r\n\r\nconst options = {\r\n  maintainAspectRatio: false,\r\n  responsive: false,\r\n  legend: {\r\n    position: 'left',\r\n    labels: {\r\n      boxWidth: 10\r\n    }\r\n  }\r\n}\r\n\r\nclass CountryCardsContainer extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props)\r\n        this.state= {\r\n            country: \"Bangladesh\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n      let hint = new Datamap({element: document.getElementById(\"hint\")});\r\n      let map = new Datamap({\r\n          element: document.getElementById(\"MiddleEast&SouthAsia\"),\r\n          geographyConfig: {\r\n              popupOnHover: true,\r\n              highlightOnHover: true,\r\n              borderColor: '#c0c0c0',\r\n              borderWidth: 0.5,\r\n          },\r\n          setProjection: function(element) {\r\n              var projection = d3.geo.equirectangular()\r\n              .center([422, 26.5])\r\n              .scale(700)\r\n              .translate([element.offsetWidth / 2, element.offsetHeight / 2]);\r\n              var path = d3.geo.path()\r\n              .projection(projection);\r\n              return {path: path, projection: projection};\r\n          },\r\n          fills: {\r\n              defaultFill: \"#f5f5f5\",\r\n              BGD : \"#f2d5a9\",\r\n              IND: \"#e7514c\",\r\n              ISR: \"#ebcd54\",\r\n              KWT: \"#8397b3\",\r\n              TUR: \"#688c45\"\r\n          },\r\n          data: {\r\n              BGD: { fillKey: \"BGD\" },\r\n              IND: { fillKey: \"IND\" },\r\n              ISR: { fillKey: \"ISR\" },\r\n              KWT: { fillKey: \"KWT\" },\r\n              TUR: { fillKey: \"TUR\" },\r\n          },\r\n          done: (datamap) => {\r\n              datamap.svg.selectAll('.datamaps-subunit').on('click', (geography) => {\r\n                  const countryList = Object.values(DataSource.getCountryList())\r\n                  let countryFromGeo = geography.properties.name;\r\n                  if(countryList.includes(countryFromGeo)) {\r\n                    this.setState({country: countryFromGeo});\r\n                  }\r\n              });\r\n          }\r\n      });\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <>\r\n        <nav className=\"navbar navbar-dark bg-dark\" style={{position: \"fixed\", width: \"100%\"}}>\r\n          <div className=\"container\">\r\n            <div className=\"container\" style={{color:\"white\", fontSize:\"20px\"}}>Middle East & South Asia</div>\r\n          </div>\r\n        </nav>\r\n        <div id=\"hint\" style={{height: \"12px\", width: \"1px\"}}></div>\r\n        <div id=\"MiddleEast&SouthAsia\" style={{height: \"500px\", width: \"100%\"}}></div>\r\n        <div className=\"container\">\r\n        <CountryCard  country={this.state.country}/>\r\n        <h2>\r\n          GDP summary %\r\n        </h2>\r\n        <Pie\r\n          data={gdpData}\r\n          options={{options}}\r\n        />\r\n        <h2>\r\n          Revenue summary %\r\n        </h2>\r\n        <Pie\r\n          data={taxData}\r\n          options={{options}}\r\n        />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CountryCardsContainer;\r\n","import React, { Component } from 'react';\r\nimport CountryCardContiner from \"./CountryCardsContainer\"\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <CountryCardContiner />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}