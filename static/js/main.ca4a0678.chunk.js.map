{"version":3,"sources":["Badge.js","LineChart.js","DataSource.js","Graph.js","Description.js","CountryCard.js","App.js","serviceWorker.js","index.js"],"names":["Badge","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","badgeStyle","setState","cursor","color","fontColor","backgroundColor","react_default","a","createElement","className","style","value","graphType","onClick","PureComponent","defaultProps","LineChart","chartData","yAxesLabel","xAxesLabel","nextProps","type","es","data","options","title","display","displayTitle","text","fontSize","legend","displayLegend","position","legendPosition","scales","xAxes","ticks","beginAtZero","scaleLabel","labelString","yAxes","Component","Country","bangladeshChartData","GDP","labels","datasets","label","fill","borderColor","Revenue","DataSource","country","Graph","getChartData","_this2","src_LineChart","BANGLADESH","bangladeshDescription","Fragment","Description","getDescription","element","GraphTypes","CountryCard","onSetGraphType","e","target","getAttribute","badgesSection","graphTypes","map","index","src_Badge","key","headerSection","values","src_Graph","src_Description","App","src_CountryCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca4a0678.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\n\r\nclass Badge extends PureComponent {\r\n    \r\n  static defaultProps = {\r\n    fontColor: \"white\",\r\n    backgroundColor: \"rgb(158, 230, 152)\",\r\n    cursor: \"pointer\"\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      badgeStyle : {}\r\n    }\r\n};\r\n\r\n  componentWillMount() {\r\n    this.setState({\r\n      badgeStyle: {\r\n          cursor:this.props.cursor,\r\n          color: this.props.fontColor,\r\n          backgroundColor: this.props.backgroundColor\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n          <h2>\r\n            <span className=\"badge badge-success\" style={this.state.badgeStyle} value={this.props.graphType}  onClick={this.props.onClick}>\r\n                {this.props.graphType}\r\n            </span>\r\n          </h2>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Badge;\r\n","import React, {Component} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nclass LineChart extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      chartData: {},\r\n      yAxesLabel: \"\",\r\n      xAxesLabel: \"\"\r\n    }\r\n  }\r\n\r\n  static defaultProps = {\r\n    type: \"GDP\",\r\n    displayTitle:true,\r\n    displayLegend: true,\r\n    legendPosition:'right',\r\n    yAxesLabel: \"USD million\",\r\n    xAxesLabel: \"Year (Christian era)\"\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.setState({\r\n      chartData: this.props.chartData,\r\n      yAxesLabel: this.props.yAxesLabel,\r\n      xAxesLabel: this.props.xAxesLabel\r\n    })\r\n  }\r\n  \r\n  componentWillReceiveProps(nextProps ){\r\n    this.setState({\r\n                    type : nextProps.type,\r\n                    chartData: nextProps.chartData,\r\n                    yAxesLabel: nextProps.yAxesLabel,\r\n                    xAxesLabel: nextProps.xAxesLabel\r\n    })\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <div className=\"chart\">\r\n        <Line\r\n          data={this.state.chartData}\r\n          options={{\r\n            title:{\r\n              display:this.props.displayTitle,\r\n              text: this.props.type,\r\n              fontSize:25\r\n            },\r\n            legend:{\r\n              display:this.props.displayLegend,\r\n              position:this.props.legendPosition\r\n            },\r\n            scales: {\r\n                xAxes: [{\r\n                    ticks: {\r\n                        beginAtZero:true\r\n                    },\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: this.state.xAxesLabel,\r\n                        fontSize: 20\r\n                    }\r\n                }],\r\n                yAxes: [{\r\n                  ticks: {\r\n                      beginAtZero:true\r\n                  },\r\n                  scaleLabel: {\r\n                      display: true,\r\n                      labelString: this.state.yAxesLabel,\r\n                      fontSize: 20\r\n                  }\r\n              }]\r\n            }\r\n          }}\r\n        />\r\n{/* \r\n        <Pie\r\n          data={this.state.chartData}\r\n          options={{\r\n            title:{\r\n              display:this.props.displayTitle,\r\n              text:'Largest Cities In '+this.props.location,\r\n              fontSize:25\r\n            },\r\n            legend:{\r\n              display:this.props.displayLegend,\r\n              position:this.props.legendPosition\r\n            }\r\n          }}\r\n        /> */}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LineChart;","const Country = {\r\n  BANGLADESH: 'Bangladesh'\r\n}\r\n\r\nconst bangladeshChartData =  { GDP: {\r\n    labels: ['2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017'],\r\n    datasets:[\r\n      {\r\n        label:'GDP from datasets',\r\n        fill: false,\r\n        data:[\r\n          102480,\r\n          115280,\r\n          128640,\r\n          133360,\r\n          149990,\r\n          172850,\r\n          195080,\r\n          221420,\r\n          249720\r\n        ],\r\n        backgroundColor:[\r\n            \"rgb(146, 226, 253)\",\r\n            \"rgb(146, 226, 253)\",\r\n            \"rgb(146, 226, 253)\",\r\n            \"rgb(146, 226, 253)\",\r\n            \"rgb(146, 226, 253)\",\r\n            \"rgb(146, 226, 253)\",\r\n            \"rgb(146, 226, 253)\",\r\n            \"rgb(146, 226, 253)\",\r\n            \"rgb(146, 226, 253)\"\r\n        ],\r\n        borderColor: \"rgb(146, 226, 253)\"\r\n      }, {\r\n        label:'GDP from regression model',\r\n        fill: false,\r\n        data:[\r\n            101782.0518,\r\n            110464.937,\r\n            124414.5818,\r\n            139672.5299,\r\n            157042.4934,\r\n            173338.9773,\r\n            194186.5677,\r\n            220261.7805,\r\n            247576.8064\r\n          ],\r\n        backgroundColor:[\r\n            \"pink\",\r\n            \"pink\",\r\n            \"pink\",\r\n            \"pink\",\r\n            \"pink\",\r\n            \"pink\",\r\n            \"pink\",\r\n            \"pink\",\r\n            \"pink\"\r\n        ],\r\n        borderColor: \"rgb(200, 148, 166)\"\r\n      }\r\n    ] },\r\n        Revenue: {\r\n            labels: ['2010', '2011', '2012', '2013', '2014', '2015'],\r\n            datasets:[\r\n              {\r\n                label:'Revenue from datasets',\r\n                fill: false,\r\n                data:[\r\n                  998712.2,\r\n                  1140588.6,\r\n                  1419108.7,\r\n                  1620084.1,\r\n                  1760784.2,\r\n                  1779483.0\r\n                ],\r\n                backgroundColor:[\r\n                    \"rgb(146, 226, 253)\",\r\n                    \"rgb(146, 226, 253)\",\r\n                    \"rgb(146, 226, 253)\",\r\n                    \"rgb(146, 226, 253)\",\r\n                    \"rgb(146, 226, 253)\",\r\n                    \"rgb(146, 226, 253)\",\r\n                    \"rgb(146, 226, 253)\",\r\n                    \"rgb(146, 226, 253)\",\r\n                    \"rgb(146, 226, 253)\"\r\n                ],\r\n                borderColor: \"rgb(146, 226, 253)\"\r\n              }, {\r\n                label:'Revenue from regression model',\r\n                fill: false,\r\n                data:[\r\n                  1000990.54,\r\n                  1138967.937,\r\n                  1417602.626,\r\n                  1618919.03,\r\n                  1761196.702,\r\n                  1781115.358\r\n                  ],\r\n                backgroundColor:[\r\n                    \"pink\",\r\n                    \"pink\",\r\n                    \"pink\",\r\n                    \"pink\",\r\n                    \"pink\",\r\n                    \"pink\",\r\n                    \"pink\",\r\n                    \"pink\",\r\n                    \"pink\"\r\n                ],\r\n                borderColor: \"rgb(200, 148, 166)\"\r\n              }\r\n            ] \r\n        }\r\n  }\r\n\r\nclass DataSource {\r\n    static getChartData(type, country) {\r\n      let data = {}\r\n\r\n        switch(country) {\r\n            case (Country.BANGLADESH): \r\n                data =  bangladeshChartData[type]\r\n                break;\r\n            default: \r\n                data = {}\r\n        }\r\n\r\n        return data\r\n    }\r\n}\r\n\r\nexport default DataSource;","import React, { Component } from 'react';\r\nimport LineChart from \"./LineChart\"\r\nimport DataSource from \"./DataSource\"\r\n\r\nclass Graph extends Component {\r\n    \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        chartData:{},\r\n        type: this.props.type,\r\n        country: this.props.country\r\n      }\r\n};\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    this.setState({type : nextProps.type}, () => {this.getChartData()})\r\n  }\r\n\r\n  componentWillMount() {\r\n        this.getChartData();\r\n  }\r\n  \r\n  getChartData = () => {\r\n    this.setState({\r\n      chartData: DataSource.getChartData(this.state.type, this.state.country)\r\n      }\r\n    )\r\n  }\r\n  render() {\r\n    return (\r\n          <div className=\"d-flex flex-column justify-content-around mt-4\">\r\n              <LineChart  type={this.state.type} chartData={this.state.chartData} legendPosition=\"bottom\"/>\r\n          </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n","import React, { Component } from 'react';\r\n\r\nconst Country = {\r\n    BANGLADESH: 'Bangladesh'\r\n}\r\n\r\nconst bangladeshDescription = {\r\n    GDP : <>\r\n    <p className=\"text-center\">\r\n      GDP\r\n    </p>\r\n    <p>\r\n      Factor\r\n    </p>\r\n    <ul className=\"list-group\">\r\n      <li className=\"list-group-item\">Utilities </li>\r\n      <li className=\"list-group-item\">agriculture</li>\r\n      <li className=\"list-group-item\">service</li>\r\n      <li className=\"list-group-item active\">Manufacturing</li>\r\n      <li className=\"list-group-item\">Constant Prices</li>\r\n      <li className=\"list-group-item\">Gross National Product</li>\r\n    </ul>\r\n    <p className=\"mt-4\">\r\n      At significance level = 0.01\r\n    </p>\r\n    <p>\r\n      Manufacturing is an effective factor\r\n    </p>\r\n    <p>\r\n     Regression equation\r\n    </p>\r\n    <p>\r\n      GDP = - 28851.2 + 1164.8 * GDP From Manufacturing\r\n    </p>\r\n    <p>\r\n      Correlation = 0.9932\r\n    </p>\r\n    </>\r\n  ,\r\n    Revenue : <>\r\n    <p className=\"text-center\">\r\n      Revenue\r\n    </p>\r\n    <p>\r\n      Factor\r\n    </p>\r\n    <ul className=\"list-group\">\r\n      <li className=\"list-group-item active\">Corporate Tax and Sales Tax </li>\r\n      <li className=\"list-group-item active\">Non-Tax</li>\r\n      <li className=\"list-group-item active\"> Personal income Tax</li>\r\n    </ul>\r\n    <p className=\"mt-4\">\r\n      At significance level = 0.1\r\n    </p>\r\n    <p>\r\n      All factors is an effective factor\r\n    </p>\r\n    <p>\r\n     Regression equation\r\n    </p>\r\n    <p>\r\n      Revenue = - 10.13129 + 1.00986 * (Corporate Tax and Sales Tax) + 1.05979 * (non-tax) + 0.90444 * (Personal income tax)\r\n    </p>\r\n    <p>\r\n      Correlation = 1.0000\r\n    </p>\r\n    </>\r\n}\r\n\r\nclass Description extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          type: \"\",\r\n          country: \"\"\r\n        };\r\n      }\r\n\r\n      componentWillMount() {\r\n        this.setState({\r\n          type: this.props.type,\r\n          country: this.props.country\r\n          })\r\n      }\r\n\r\n      componentWillReceiveProps(nextProps) {\r\n        this.setState({\r\n            type : nextProps.type,\r\n            country: nextProps.country\r\n        })\r\n      }\r\n\r\n      getDescription = (type, country) => {\r\n          let element = \"\"\r\n         \r\n          switch(country) {\r\n              case Country.BANGLADESH:\r\n                element = bangladeshDescription[type]    \r\n              break;\r\n              default:\r\n              element = <></>\r\n          }\r\n\r\n          return element\r\n      }\r\n      render() {\r\n        return (\r\n        <section>\r\n            <h3>Description</h3>\r\n            {this.getDescription(this.state.type, this.state.country)}\r\n        </section>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Description;","import React, { Component } from 'react';\r\nimport Badge from \"./Badge\"\r\nimport Graph from \"./Graph\"\r\nimport Description from './Description';\r\n\r\nconst GraphTypes = {\r\n  Revenue: 'Revenue', \r\n  GDP: 'GDP'\r\n  };\r\n\r\nclass CountryCard extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      graphType: \"\",\r\n      country: \"\"\r\n    };\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.setState({\r\n      country: this.props.country,\r\n      graphType: GraphTypes.GDP\r\n      })\r\n  }\r\n\r\n  onSetGraphType = (e) => {\r\n    this.setState({graphType: e.target.getAttribute(\"value\")})\r\n  }\r\n\r\n  badgesSection = (graphTypes) => {\r\n    return  <div className=\"d-flex flex-row justify-content-around mt-3\">\r\n    {graphTypes.map( (graphType, index) =>  <Badge onClick={this.onSetGraphType} graphType={graphType} key={index} />)}\r\n  </div>\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"d-flex flex-column\">\r\n          {headerSection(this.state.country)}\r\n            {/* wrap me to charts section pls*/}\r\n          <section>\r\n            <h3>Chart from Datasets vs Regression model</h3>\r\n            {this.badgesSection(Object.values(GraphTypes))}\r\n            <Graph country={this.state.country} type={this.state.graphType} />\r\n          </section>\r\n          {/* -- */}\r\n            <Description type={this.state.graphType} country={this.state.country} />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst headerSection = (title) => {\r\n  return <h1 className=\"text-center\">{title}</h1>\r\n}\r\n\r\nexport default CountryCard;\r\n","import React, { Component } from 'react';\r\nimport CountryCard from \"./CountryCard\"\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n       <CountryCard  country=\"Bangladesh\"/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}