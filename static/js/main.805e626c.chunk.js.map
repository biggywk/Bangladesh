{"version":3,"sources":["Badge.js","LineChart.js","DataSource.js","Graph.js","CountryCard.js","App.js","serviceWorker.js","index.js"],"names":["Badge","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","badgeStyle","cursor","color","fontColor","backgroundColor","react_default","a","createElement","className","style","value","graphType","onClick","PureComponent","defaultProps","LineChart","chartData","nextProps","setState","type","es","data","options","title","display","displayTitle","text","fontSize","legend","displayLegend","position","legendPosition","scales","yAxes","ticks","beginAtZero","scaleLabel","labelString","Component","bangladeshChartData","GDP","labels","datasets","label","fill","borderColor","TAX","Country","DataSource","country","Graph","getChartData","_this2","src_LineChart","GraphTypes","CountryCard","onSetGraphType","e","target","getAttribute","badgesSection","graphTypes","map","index","src_Badge","key","headerSection","values","src_Graph","App","src_CountryCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.805e626c.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\r\n\r\nclass Badge extends PureComponent {\r\n    \r\n  static defaultProps = {\r\n    fontColor: \"white\",\r\n    backgroundColor: \"rgb(158, 230, 152)\",\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {badgeStyle : {\r\n        cursor: \"pointer\",\r\n        color: this.props.fontColor,\r\n        backgroundColor: this.props.backgroundColor\r\n    }}\r\n};\r\n\r\n  render() {\r\n    return (\r\n          <h2>\r\n            <span className=\"badge badge-success\" style={this.state.badgeStyle} value={this.props.graphType}  onClick={this.props.onClick}>\r\n                {this.props.graphType}\r\n            </span>\r\n          </h2>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Badge;\r\n","import React, {Component} from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nclass LineChart extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      chartData: this.props.chartData\r\n    }\r\n  }\r\n\r\n  static defaultProps = {\r\n    displayTitle:true,\r\n    displayLegend: true,\r\n    legendPosition:'right',\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps ){\r\n    // don't set state like this\r\n    this.setState({type : nextProps.type})\r\n    this.setState({chartData : nextProps.chartData})\r\n\r\n  }\r\n  \r\n  render(){\r\n    return (\r\n      <div className=\"chart\">\r\n        <Line\r\n          data={this.state.chartData}\r\n          options={{\r\n            title:{\r\n              display:this.props.displayTitle,\r\n              text: this.props.type,\r\n              fontSize:25\r\n            },\r\n            legend:{\r\n              display:this.props.displayLegend,\r\n              position:this.props.legendPosition\r\n            },\r\n            scales: {\r\n                yAxes: [{\r\n                    ticks: {\r\n                        beginAtZero:true\r\n                    },\r\n                    scaleLabel: {\r\n                        display: true,\r\n                        labelString: 'Year (Christian era)',\r\n                        fontSize: 20\r\n                    }\r\n                }]\r\n            }\r\n          }}\r\n        />\r\n{/* \r\n        <Pie\r\n          data={this.state.chartData}\r\n          options={{\r\n            title:{\r\n              display:this.props.displayTitle,\r\n              text:'Largest Cities In '+this.props.location,\r\n              fontSize:25\r\n            },\r\n            legend:{\r\n              display:this.props.displayLegend,\r\n              position:this.props.legendPosition\r\n            }\r\n          }}\r\n        /> */}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LineChart;","const bangladeshChartData =  { GDP: {\r\n    labels: ['2009', '2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017'],\r\n    datasets:[\r\n      {\r\n        label:'GDP from datasets (USD million)',\r\n        fill: false,\r\n        data:[\r\n          102480,\r\n          115280,\r\n          128640,\r\n          133360,\r\n          149990,\r\n          172850,\r\n          195080,\r\n          221420,\r\n          249720\r\n        ],\r\n        backgroundColor:[\r\n            \"rgb(146, 226, 253)\",\r\n            \"rgb(146, 226, 253)\",\r\n            \"rgb(146, 226, 253)\",\r\n            \"rgb(146, 226, 253)\",\r\n            \"rgb(146, 226, 253)\",\r\n            \"rgb(146, 226, 253)\",\r\n            \"rgb(146, 226, 253)\",\r\n            \"rgb(146, 226, 253)\",\r\n            \"rgb(146, 226, 253)\"\r\n        ],\r\n        borderColor: \"rgb(146, 226, 253)\"\r\n      }, {\r\n        label:'GDP from regression model (USD million)',\r\n        fill: false,\r\n        data:[\r\n            101782.0518,\r\n            110464.937,\r\n            124414.5818,\r\n            139672.5299,\r\n            157042.4934,\r\n            173338.9773,\r\n            194186.5677,\r\n            220261.7805,\r\n            247576.8064\r\n          ],\r\n        backgroundColor:[\r\n            \"pink\",\r\n            \"pink\",\r\n            \"pink\",\r\n            \"pink\",\r\n            \"pink\",\r\n            \"pink\",\r\n            \"pink\",\r\n            \"pink\",\r\n            \"pink\"\r\n        ],\r\n        borderColor: \"rgb(200, 148, 166)\"\r\n      }\r\n    ] },\r\n        TAX: {\r\n            labels: ['2010', '2011', '2012', '2013', '2014', '2015'],\r\n            datasets:[\r\n              {\r\n                label:'TAX from datasets (USD billion)',\r\n                fill: false,\r\n                data:[\r\n                  998.7122,\r\n                  1140.5886,\r\n                  1419.1087,\r\n                  1620.0841,\r\n                  1760.7842,\r\n                  1779.483\r\n                ],\r\n                backgroundColor:[\r\n                    \"rgb(146, 226, 253)\",\r\n                    \"rgb(146, 226, 253)\",\r\n                    \"rgb(146, 226, 253)\",\r\n                    \"rgb(146, 226, 253)\",\r\n                    \"rgb(146, 226, 253)\",\r\n                    \"rgb(146, 226, 253)\",\r\n                    \"rgb(146, 226, 253)\",\r\n                    \"rgb(146, 226, 253)\",\r\n                    \"rgb(146, 226, 253)\"\r\n                ],\r\n                borderColor: \"rgb(146, 226, 253)\"\r\n              }, {\r\n                label:'TAX from regression model (USD billion)',\r\n                fill: false,\r\n                data:[\r\n                  1000.99054,\r\n                  1138.967937,\r\n                  1417.602626,\r\n                  1618.91903,\r\n                  1761.196702,\r\n                  1781.115358\r\n                  ],\r\n                backgroundColor:[\r\n                    \"pink\",\r\n                    \"pink\",\r\n                    \"pink\",\r\n                    \"pink\",\r\n                    \"pink\",\r\n                    \"pink\",\r\n                    \"pink\",\r\n                    \"pink\",\r\n                    \"pink\"\r\n                ],\r\n                borderColor: \"rgb(200, 148, 166)\"\r\n              }\r\n            ] \r\n        }\r\n  }\r\n\r\nconst Country = {\r\n    BANGLADESH: 'Bangladesh', \r\n}\r\n\r\nclass DataSource {\r\n    static getChartData(type, country) {\r\n      let data = {}\r\n        switch(country) {\r\n            case (Country.BANGLADESH): \r\n                data =  bangladeshChartData[type]\r\n                break;\r\n            default: \r\n                data = {}\r\n        }\r\n\r\n        return data\r\n    }\r\n}\r\n\r\nexport default DataSource;","import React, { Component } from 'react';\r\nimport LineChart from \"./LineChart\"\r\nimport DataSource from \"./DataSource\"\r\n\r\nclass Graph extends Component {\r\n    \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        chartData:{},\r\n        type: this.props.type,\r\n        country: this.props.country\r\n      }\r\n};\r\n\r\n  componentWillReceiveProps(nextProps ){\r\n    this.setState({type : nextProps.type}, () => {this.getChartData()})\r\n  }\r\n\r\n  componentWillMount(){\r\n        this.getChartData();\r\n  }\r\n\r\n  \r\n  getChartData = () => {\r\n    this.setState({\r\n      chartData: DataSource.getChartData(this.state.type, this.state.country)\r\n      }\r\n    )\r\n  }\r\n  render() {\r\n    return (\r\n          <div className=\"d-flex flex-column justify-content-around mt-4\">\r\n              <LineChart  type={this.state.type} chartData={this.state.chartData} legendPosition=\"bottom\"/>\r\n          </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Graph;\r\n","import React, { Component } from 'react';\r\nimport Badge from \"./Badge\"\r\nimport Graph from \"./Graph\"\r\n\r\nconst GraphTypes = {\r\n  TAX: 'TAX', \r\n  GDP: 'GDP'\r\n  };\r\n\r\nclass CountryCard extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      graphType: GraphTypes.GDP,\r\n      country: this.props.country\r\n    };\r\n  }\r\n\r\n  onSetGraphType = (e) => {\r\n    this.setState({graphType: e.target.getAttribute(\"value\")})\r\n  }\r\n\r\n  badgesSection = (graphTypes) => {\r\n    return  <div className=\"d-flex flex-row justify-content-around mt-3\">\r\n    {graphTypes.map( (graphType, index) =>  <Badge onClick={this.onSetGraphType} graphType={graphType} key={index} />)}\r\n  </div>\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"d-flex flex-column\">\r\n          {headerSection(this.state.country)}\r\n          {this.badgesSection(Object.values(GraphTypes))}\r\n\r\n          {/* wrap me pls */}\r\n          <h2 className=\"text-center mt-4\">\r\n          <Graph country={this.state.country} type={this.state.graphType} />\r\n          </h2>\r\n          {/* -- */}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst headerSection = (title) => {\r\n  return <h1 className=\"text-center\">{title}</h1>\r\n}\r\n\r\nexport default CountryCard;\r\n","import React, { Component } from 'react';\r\nimport CountryCard from \"./CountryCard\"\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n       <CountryCard  country=\"Bangladesh\"/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}